#include <stdio.h>
#include <string.h>
#include <malloc.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>

struct args {
	char arg;
	int flag;
};

typedef struct args CMD_ARGUEMENTS; 
	

void execute_wc(char filename[],int length,CMD_ARGUEMENTS s[],char name[50])
{
	//printf("\nLength of the file is %d",length);
	int count=0,lc=0,highest =0,line_length=0,wc=0,temp=0;
	while(count<length)	
	{
		line_length=0;
		while(filename[count]!='\n')//used to measure the length of the line
		{
			//line_length++;
			//if((filename[count] == ' ' && filename[count-1]!=' ' && filename[count+1]!=' ') || (filename[count]!=' ' && filename[count+1]=='\n'))	
			/*temp = count;
			if(filename[count] == ' ')
			{
				temp = temp +1;
				if(filename[temp]!='\0')
				{
					while(filename[temp] == ' ')
					{
						count++;
						line_length++;
						temp++;
					}
				}

		
				wc++;
			count++;*/
			if(filename[count]==' ' && filename[count-1]=='\n'){
					count++;
					line_length++; }


			if(filename[count]== ' ' && filename[count-1] != ' ')
			     {
					while(filename[count]== ' ')// || filename[count] == '\n')
					{
 						count++;
						line_length++;
					
					}
					wc++;					

			     }

			if((filename[count]!=' ' && filename[count+1]=='\n'))
				wc++;

			

			count++;
			line_length++;
			
		}
			
		if(filename[count] == '\n')
		{
			lc++;
			count++;
			//wc++;//newly added
		}

		if(line_length>highest)
			highest = line_length;
	}
//	lc++;
//the order to be followed here is line, word, character 

	if(s[0].flag)
		printf("\t %d\t",lc); //line count
	if(s[4].flag)
		printf("\t %d\t",wc);//word count
	if(s[3].flag)
		printf("\t %d\t",count);//character count
	if(s[2].flag)
		printf("\t %d\t",length);//number of bytes
	if(s[1].flag)
		printf("\t %d\t",highest);//length of longest line

	printf("\t %s\n",name);
	

/*	printf("\nline %d",lc);
	printf("The longest line is %d\n",highest);
	printf(" Words are %d",wc);
	printf("Length %d",length);*/
	
}

int main(int argc,char **argv)
{

	int i=0,j=0,flag=0,k=0,length_file=0,count_file=0,rows;
	char c_args[6],**cmd_filenames,*filecontent=NULL;

	struct stat filestat;
	CMD_ARGUEMENTS s[5];
	s[0].arg = 'l';//No of lines
	s[1].arg = 'L';//Length of the longest line
	s[2].arg = 'm';//number of bytes
	s[3].arg = 'c';//number of characters
	s[4].arg = 'w';//number of words*/

	//initializing all flags
	s[0].flag = 0;
	s[1].flag = 0;
	s[2].flag = 0;
	s[3].flag = 0;
	s[4].flag = 0;

	//Row pointer for the number of files that are given as input to the file
	rows=argc-1;
	cmd_filenames = (char**)(malloc(rows*sizeof(char *)));




	for(i=1;i<argc;i++)
	{
		flag=0;
		j=0;
		//printf("\n%d arguement ",i);
		while(argv[i][j]!='\0')
		{

			if(argv[i][j]=='-')
			{
				j++;
				flag=1;
				break;
			}
			//printf("%c",argv[i][j++]);
			j++;

		}
		printf("  ");  // -l-w-c
	
		//Used to capture arguements of the commands
		if(flag)
		{

			while(argv[i][j]!='\0') //|| (argv[i][j]!=' '))
			{
				c_args[k++]=argv[i][j++];
			}

			//printf("\nThese are the commands arguements -%s",c_args);
		}
		else
		{
			length_file = strlen(argv[i]);
				
			cmd_filenames[count_file] = (char *)malloc(length_file*sizeof(char));
			strcpy(cmd_filenames[count_file],argv[i]);
			count_file++;
		}
			
	}
	c_args[k] = '\0';

	if(strlen(c_args)==0)
		{
			s[0].flag = 1;
			s[4].flag = 1;
			s[3].flag = 1;
		}

	//printf("\nThese are the commands arguements -%s",c_args);
	
	if(count_file==0)
		printf("\nEnter some file Name");
	/*for(i=0;i<count_file;i++)
		printf("\nThe file that is input is %s ",cmd_filenames[i]);

	printf("\nWhat is happening!?");*/

	i=0;	
	while(c_args[i]!='\0')
	{
		switch(c_args[i])
		{
			case 'l' : s[0].flag = 1;
				   break;
			case 'L' : s[1].flag = 1;
				   break;
			case 'm' : s[2].flag = 1;
				   break;
			case 'c' : s[3].flag = 1;
				   break;
			case 'w' : s[4].flag = 1;
				   break;
			default : break;
	
		}

		i++;
	}

	int fd;
	fd = open(cmd_filenames[0],S_IRUSR);
	if(fd<0)
	{
		printf("Cant open error!");
		return 0;
	}
	else
	{
		fstat(fd,&filestat);
	//	printf("\nThe size of the file is %d",filestat.st_size);
		
		filecontent = (char*) (malloc(filestat.st_size + 10));
		//cmd_filenames[0] = (char *) (malloc(filestat.st_size));
		//reading the file
		read(fd,filecontent,filestat.st_size);
//		printf("\nSize of the file is %d",filestat.size);
	//	printf("\nThe file content is \n%s\n",filecontent); // printing the files here
		//now we need to send these files for the count of lines words etc
		execute_wc(filecontent,filestat.st_size,s,cmd_filenames[0]);
	}
	close(fd);
	free(cmd_filenames);
	free(filecontent);
	printf("\n");

}

#include <stdio.h>
#include <string.h>
#include <malloc.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>

struct args {
	char arg;
	int flag;
};

typedef struct args CMD_ARGUEMENTS; 
	

void execute_wc(char filename[],int length,CMD_ARGUEMENTS s[],char name[50])
{
	//printf("\nLength of the file is %d",length);
	int count=0,lc=0,highest =0,line_length=0,wc=0,temp=0;
	while(count<length)	
	{
		line_length=0;
		while(filename[count]!='\n')//used to measure the length of the line
		{
			//line_length++;
			//if((filename[count] == ' ' && filename[count-1]!=' ' && filename[count+1]!=' ') || (filename[count]!=' ' && filename[count+1]=='\n'))	
			/*temp = count;
			if(filename[count] == ' ')
			{
				temp = temp +1;
				if(filename[temp]!='\0')
				{
					while(filename[temp] == ' ')
					{
						count++;
						line_length++;
						temp++;
					}
				}

		
				wc++;
			count++;*/
			if(filename[count]==' ' && filename[count-1]=='\n'){
					count++;
					line_length++; }


			if(filename[count]== ' ' && filename[count-1] != ' ')
			     {
					while(filename[count]== ' ')// || filename[count] == '\n')
					{
 						count++;
						line_length++;
					
					}
					wc++;					

			     }

			if((filename[count]!=' ' && filename[count+1]=='\n'))
				wc++;

			

			count++;
			line_length++;
			
		}
			
		if(filename[count] == '\n')
		{
			lc++;
			count++;
			//wc++;//newly added
		}

		if(line_length>highest)
			highest = line_length;
	}
//	lc++;
//the order to be followed here is line, word, character 

	if(s[0].flag)
		printf("\t %d\t",lc); //line count
	if(s[4].flag)
		printf("\t %d\t",wc);//word count
	if(s[3].flag)
		printf("\t %d\t",count);//character count
	if(s[2].flag)
		printf("\t %d\t",length);//number of bytes
	if(s[1].flag)
		printf("\t %d\t",highest);//length of longest line

	printf("\t %s\n",name);
	

/*	printf("\nline %d",lc);
	printf("The longest line is %d\n",highest);
	printf(" Words are %d",wc);
	printf("Length %d",length);*/
	
}

int main(int argc,char **argv)
{

	int i=0,j=0,flag=0,k=0,length_file=0,count_file=0,rows;
	char c_args[6],**cmd_filenames,*filecontent=NULL;

	struct stat filestat;
	CMD_ARGUEMENTS s[5];
	s[0].arg = 'l';//No of lines
	s[1].arg = 'L';//Length of the longest line
	s[2].arg = 'm';//number of bytes
	s[3].arg = 'c';//number of characters
	s[4].arg = 'w';//number of words*/

	//initializing all flags
	s[0].flag = 0;
	s[1].flag = 0;
	s[2].flag = 0;
	s[3].flag = 0;
	s[4].flag = 0;

	//Row pointer for the number of files that are given as input to the file
	rows=argc-1;
	cmd_filenames = (char**)(malloc(rows*sizeof(char *)));




	for(i=1;i<argc;i++)
	{
		flag=0;
		j=0;
		//printf("\n%d arguement ",i);
		while(argv[i][j]!='\0')
		{

			if(argv[i][j]=='-')
			{
				j++;
				flag=1;
				break;
			}
			//printf("%c",argv[i][j++]);
			j++;

		}
		printf("  ");  // -l-w-c
	
		//Used to capture arguements of the commands
		if(flag)
		{

			while(argv[i][j]!='\0') //|| (argv[i][j]!=' '))
			{
				c_args[k++]=argv[i][j++];
			}

			//printf("\nThese are the commands arguements -%s",c_args);
		}
		else
		{
			length_file = strlen(argv[i]);
				
			cmd_filenames[count_file] = (char *)malloc(length_file*sizeof(char));
			strcpy(cmd_filenames[count_file],argv[i]);
			count_file++;
		}
			
	}
	c_args[k] = '\0';

	if(strlen(c_args)==0)
		{
			s[0].flag = 1;
			s[4].flag = 1;
			s[3].flag = 1;
		}

	//printf("\nThese are the commands arguements -%s",c_args);
	
	if(count_file==0)
		printf("\nEnter some file Name");
	/*for(i=0;i<count_file;i++)
		printf("\nThe file that is input is %s ",cmd_filenames[i]);

	printf("\nWhat is happening!?");*/

	i=0;	
	while(c_args[i]!='\0')
	{
		switch(c_args[i])
		{
			case 'l' : s[0].flag = 1;
				   break;
			case 'L' : s[1].flag = 1;
				   break;
			case 'm' : s[2].flag = 1;
				   break;
			case 'c' : s[3].flag = 1;
				   break;
			case 'w' : s[4].flag = 1;
				   break;
			default : break;
	
		}

		i++;
	}

	int fd;
	fd = open(cmd_filenames[0],S_IRUSR);
	if(fd<0)
	{
		printf("Cant open error!");
		return 0;
	}
	else
	{
		fstat(fd,&filestat);
	//	printf("\nThe size of the file is %d",filestat.st_size);
		
		filecontent = (char*) (malloc(filestat.st_size + 10));
		//cmd_filenames[0] = (char *) (malloc(filestat.st_size));
		//reading the file
		read(fd,filecontent,filestat.st_size);
//		printf("\nSize of the file is %d",filestat.size);
	//	printf("\nThe file content is \n%s\n",filecontent); // printing the files here
		//now we need to send these files for the count of lines words etc
		execute_wc(filecontent,filestat.st_size,s,cmd_filenames[0]);
	}
	close(fd);
	free(cmd_filenames);
	free(filecontent);
	printf("\n");

}


#include <stdio.h>
#include <string.h>
#include <malloc.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>

struct args {
	char arg;
	int flag;
};

typedef struct args CMD_ARGUEMENTS; 
	

void execute_wc(char filename[],int length,CMD_ARGUEMENTS s[],char name[50])
{
	//printf("\nLength of the file is %d",length);
	int count=0,lc=0,highest =0,line_length=0,wc=0,temp=0;
	while(count<length)	
	{
		line_length=0;
		while(filename[count]!='\n')//used to measure the length of the line
		{
			//line_length++;
			//if((filename[count] == ' ' && filename[count-1]!=' ' && filename[count+1]!=' ') || (filename[count]!=' ' && filename[count+1]=='\n'))	
			/*temp = count;
			if(filename[count] == ' ')
			{
				temp = temp +1;
				if(filename[temp]!='\0')
				{
					while(filename[temp] == ' ')
					{
						count++;
						line_length++;
						temp++;
					}
				}

		
				wc++;
			count++;*/
			if(filename[count]==' ' && filename[count-1]=='\n'){
					count++;
					line_length++; }


			if(filename[count]== ' ' && filename[count-1] != ' ')
			     {
					while(filename[count]== ' ')// || filename[count] == '\n')
					{
 						count++;
						line_length++;
					
					}
					wc++;					

			     }

			if((filename[count]!=' ' && filename[count+1]=='\n'))
				wc++;

			

			count++;
			line_length++;
			
		}
			
		if(filename[count] == '\n')
		{
			lc++;
			count++;
			//wc++;//newly added
		}

		if(line_length>highest)
			highest = line_length;
	}
//	lc++;
//the order to be followed here is line, word, character 

	if(s[0].flag)
		printf("\t %d\t",lc); //line count
	if(s[4].flag)
		printf("\t %d\t",wc);//word count
	if(s[3].flag)
		printf("\t %d\t",count);//character count
	if(s[2].flag)
		printf("\t %d\t",length);//number of bytes
	if(s[1].flag)
		printf("\t %d\t",highest);//length of longest line

	printf("\t %s\n",name);
	

/*	printf("\nline %d",lc);
	printf("The longest line is %d\n",highest);
	printf(" Words are %d",wc);
	printf("Length %d",length);*/
	
}

int main(int argc,char **argv)
{

	int i=0,j=0,flag=0,k=0,length_file=0,count_file=0,rows;
	char c_args[6],**cmd_filenames,*filecontent=NULL;

	struct stat filestat;
	CMD_ARGUEMENTS s[5];
	s[0].arg = 'l';//No of lines
	s[1].arg = 'L';//Length of the longest line
	s[2].arg = 'm';//number of bytes
	s[3].arg = 'c';//number of characters
	s[4].arg = 'w';//number of words*/

	//initializing all flags
	s[0].flag = 0;
	s[1].flag = 0;
	s[2].flag = 0;
	s[3].flag = 0;
	s[4].flag = 0;

	//Row pointer for the number of files that are given as input to the file
	rows=argc-1;
	cmd_filenames = (char**)(malloc(rows*sizeof(char *)));




	for(i=1;i<argc;i++)
	{
		flag=0;
		j=0;
		//printf("\n%d arguement ",i);
		while(argv[i][j]!='\0')
		{

			if(argv[i][j]=='-')
			{
				j++;
				flag=1;
				break;
			}
			//printf("%c",argv[i][j++]);
			j++;

		}
		printf("  ");  // -l-w-c
	
		//Used to capture arguements of the commands
		if(flag)
		{

			while(argv[i][j]!='\0') //|| (argv[i][j]!=' '))
			{
				c_args[k++]=argv[i][j++];
			}

			//printf("\nThese are the commands arguements -%s",c_args);
		}
		else
		{
			length_file = strlen(argv[i]);
				
			cmd_filenames[count_file] = (char *)malloc(length_file*sizeof(char));
			strcpy(cmd_filenames[count_file],argv[i]);
			count_file++;
		}
			
	}
	c_args[k] = '\0';

	if(strlen(c_args)==0)
		{
			s[0].flag = 1;
			s[4].flag = 1;
			s[3].flag = 1;
		}

	//printf("\nThese are the commands arguements -%s",c_args);
	
	if(count_file==0)
		printf("\nEnter some file Name");
	/*for(i=0;i<count_file;i++)
		printf("\nThe file that is input is %s ",cmd_filenames[i]);

	printf("\nWhat is happening!?");*/

	i=0;	
	while(c_args[i]!='\0')
	{
		switch(c_args[i])
		{
			case 'l' : s[0].flag = 1;
				   break;
			case 'L' : s[1].flag = 1;
				   break;
			case 'm' : s[2].flag = 1;
				   break;
			case 'c' : s[3].flag = 1;
				   break;
			case 'w' : s[4].flag = 1;
				   break;
			default : break;
	
		}

		i++;
	}

	int fd;
	fd = open(cmd_filenames[0],S_IRUSR);
	if(fd<0)
	{
		printf("Cant open error!");
		return 0;
	}
	else
	{
		fstat(fd,&filestat);
	//	printf("\nThe size of the file is %d",filestat.st_size);
		
		filecontent = (char*) (malloc(filestat.st_size + 10));
		//cmd_filenames[0] = (char *) (malloc(filestat.st_size));
		//reading the file
		read(fd,filecontent,filestat.st_size);
//		printf("\nSize of the file is %d",filestat.size);
	//	printf("\nThe file content is \n%s\n",filecontent); // printing the files here
		//now we need to send these files for the count of lines words etc
		execute_wc(filecontent,filestat.st_size,s,cmd_filenames[0]);
	}
	close(fd);
	free(cmd_filenames);
	free(filecontent);
	printf("\n");

}


#include <stdio.h>
#include <string.h>
#include <malloc.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>

struct args {
	char arg;
	int flag;
};

typedef struct args CMD_ARGUEMENTS; 
	

void execute_wc(char filename[],int length,CMD_ARGUEMENTS s[],char name[50])
{
	//printf("\nLength of the file is %d",length);
	int count=0,lc=0,highest =0,line_length=0,wc=0,temp=0;
	while(count<length)	
	{
		line_length=0;
		while(filename[count]!='\n')//used to measure the length of the line
		{
			//line_length++;
			//if((filename[count] == ' ' && filename[count-1]!=' ' && filename[count+1]!=' ') || (filename[count]!=' ' && filename[count+1]=='\n'))	
			/*temp = count;
			if(filename[count] == ' ')
			{
				temp = temp +1;
				if(filename[temp]!='\0')
				{
					while(filename[temp] == ' ')
					{
						count++;
						line_length++;
						temp++;
					}
				}

		
				wc++;
			count++;*/
			if(filename[count]==' ' && filename[count-1]=='\n'){
					count++;
					line_length++; }


			if(filename[count]== ' ' && filename[count-1] != ' ')
			     {
					while(filename[count]== ' ')// || filename[count] == '\n')
					{
 						count++;
						line_length++;
					
					}
					wc++;					

			     }

			if((filename[count]!=' ' && filename[count+1]=='\n'))
				wc++;

			

			count++;
			line_length++;
			
		}
			
		if(filename[count] == '\n')
		{
			lc++;
			count++;
			//wc++;//newly added
		}

		if(line_length>highest)
			highest = line_length;
	}
//	lc++;
//the order to be followed here is line, word, character 

	if(s[0].flag)
		printf("\t %d\t",lc); //line count
	if(s[4].flag)
		printf("\t %d\t",wc);//word count
	if(s[3].flag)
		printf("\t %d\t",count);//character count
	if(s[2].flag)
		printf("\t %d\t",length);//number of bytes
	if(s[1].flag)
		printf("\t %d\t",highest);//length of longest line

	printf("\t %s\n",name);
	

/*	printf("\nline %d",lc);
	printf("The longest line is %d\n",highest);
	printf(" Words are %d",wc);
	printf("Length %d",length);*/
	
}

int main(int argc,char **argv)
{

	int i=0,j=0,flag=0,k=0,length_file=0,count_file=0,rows;
	char c_args[6],**cmd_filenames,*filecontent=NULL;

	struct stat filestat;
	CMD_ARGUEMENTS s[5];
	s[0].arg = 'l';//No of lines
	s[1].arg = 'L';//Length of the longest line
	s[2].arg = 'm';//number of bytes
	s[3].arg = 'c';//number of characters
	s[4].arg = 'w';//number of words*/

	//initializing all flags
	s[0].flag = 0;
	s[1].flag = 0;
	s[2].flag = 0;
	s[3].flag = 0;
	s[4].flag = 0;

	//Row pointer for the number of files that are given as input to the file
	rows=argc-1;
	cmd_filenames = (char**)(malloc(rows*sizeof(char *)));




	for(i=1;i<argc;i++)
	{
		flag=0;
		j=0;
		//printf("\n%d arguement ",i);
		while(argv[i][j]!='\0')
		{

			if(argv[i][j]=='-')
			{
				j++;
				flag=1;
				break;
			}
			//printf("%c",argv[i][j++]);
			j++;

		}
		printf("  ");  // -l-w-c
	
		//Used to capture arguements of the commands
		if(flag)
		{

			while(argv[i][j]!='\0') //|| (argv[i][j]!=' '))
			{
				c_args[k++]=argv[i][j++];
			}

			//printf("\nThese are the commands arguements -%s",c_args);
		}
		else
		{
			length_file = strlen(argv[i]);
				
			cmd_filenames[count_file] = (char *)malloc(length_file*sizeof(char));
			strcpy(cmd_filenames[count_file],argv[i]);
			count_file++;
		}
			
	}
	c_args[k] = '\0';

	if(strlen(c_args)==0)
		{
			s[0].flag = 1;
			s[4].flag = 1;
			s[3].flag = 1;
		}

	//printf("\nThese are the commands arguements -%s",c_args);
	
	if(count_file==0)
		printf("\nEnter some file Name");
	/*for(i=0;i<count_file;i++)
		printf("\nThe file that is input is %s ",cmd_filenames[i]);

	printf("\nWhat is happening!?");*/

	i=0;	
	while(c_args[i]!='\0')
	{
		switch(c_args[i])
		{
			case 'l' : s[0].flag = 1;
				   break;
			case 'L' : s[1].flag = 1;
				   break;
			case 'm' : s[2].flag = 1;
				   break;
			case 'c' : s[3].flag = 1;
				   break;
			case 'w' : s[4].flag = 1;
				   break;
			default : break;
	
		}

		i++;
	}

	int fd;
	fd = open(cmd_filenames[0],S_IRUSR);
	if(fd<0)
	{
		printf("Cant open error!");
		return 0;
	}
	else
	{
		fstat(fd,&filestat);
	//	printf("\nThe size of the file is %d",filestat.st_size);
		
		filecontent = (char*) (malloc(filestat.st_size + 10));
		//cmd_filenames[0] = (char *) (malloc(filestat.st_size));
		//reading the file
		read(fd,filecontent,filestat.st_size);
//		printf("\nSize of the file is %d",filestat.size);
	//	printf("\nThe file content is \n%s\n",filecontent); // printing the files here
		//now we need to send these files for the count of lines words etc
		execute_wc(filecontent,filestat.st_size,s,cmd_filenames[0]);
	}
	close(fd);
	free(cmd_filenames);
	free(filecontent);
	printf("\n");

}


#include <stdio.h>
#include <string.h>
#include <malloc.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>

struct args {
	char arg;
	int flag;
};

typedef struct args CMD_ARGUEMENTS; 
	

void execute_wc(char filename[],int length,CMD_ARGUEMENTS s[],char name[50])
{
	//printf("\nLength of the file is %d",length);
	int count=0,lc=0,highest =0,line_length=0,wc=0,temp=0;
	while(count<length)	
	{
		line_length=0;
		while(filename[count]!='\n')//used to measure the length of the line
		{
			//line_length++;
			//if((filename[count] == ' ' && filename[count-1]!=' ' && filename[count+1]!=' ') || (filename[count]!=' ' && filename[count+1]=='\n'))	
			/*temp = count;
			if(filename[count] == ' ')
			{
				temp = temp +1;
				if(filename[temp]!='\0')
				{
					while(filename[temp] == ' ')
					{
						count++;
						line_length++;
						temp++;
					}
				}

		
				wc++;
			count++;*/
			if(filename[count]==' ' && filename[count-1]=='\n'){
					count++;
					line_length++; }


			if(filename[count]== ' ' && filename[count-1] != ' ')
			     {
					while(filename[count]== ' ')// || filename[count] == '\n')
					{
 						count++;
						line_length++;
					
					}
					wc++;					

			     }

			if((filename[count]!=' ' && filename[count+1]=='\n'))
				wc++;

			

			count++;
			line_length++;
			
		}
			
		if(filename[count] == '\n')
		{
			lc++;
			count++;
			//wc++;//newly added
		}

		if(line_length>highest)
			highest = line_length;
	}
//	lc++;
//the order to be followed here is line, word, character 

	if(s[0].flag)
		printf("\t %d\t",lc); //line count
	if(s[4].flag)
		printf("\t %d\t",wc);//word count
	if(s[3].flag)
		printf("\t %d\t",count);//character count
	if(s[2].flag)
		printf("\t %d\t",length);//number of bytes
	if(s[1].flag)
		printf("\t %d\t",highest);//length of longest line

	printf("\t %s\n",name);
	

/*	printf("\nline %d",lc);
	printf("The longest line is %d\n",highest);
	printf(" Words are %d",wc);
	printf("Length %d",length);*/
	
}

int main(int argc,char **argv)
{

	int i=0,j=0,flag=0,k=0,length_file=0,count_file=0,rows;
	char c_args[6],**cmd_filenames,*filecontent=NULL;

	struct stat filestat;
	CMD_ARGUEMENTS s[5];
	s[0].arg = 'l';//No of lines
	s[1].arg = 'L';//Length of the longest line
	s[2].arg = 'm';//number of bytes
	s[3].arg = 'c';//number of characters
	s[4].arg = 'w';//number of words*/

	//initializing all flags
	s[0].flag = 0;
	s[1].flag = 0;
	s[2].flag = 0;
	s[3].flag = 0;
	s[4].flag = 0;

	//Row pointer for the number of files that are given as input to the file
	rows=argc-1;
	cmd_filenames = (char**)(malloc(rows*sizeof(char *)));




	for(i=1;i<argc;i++)
	{
		flag=0;
		j=0;
		//printf("\n%d arguement ",i);
		while(argv[i][j]!='\0')
		{

			if(argv[i][j]=='-')
			{
				j++;
				flag=1;
				break;
			}
			//printf("%c",argv[i][j++]);
			j++;

		}
		printf("  ");  // -l-w-c
	
		//Used to capture arguements of the commands
		if(flag)
		{

			while(argv[i][j]!='\0') //|| (argv[i][j]!=' '))
			{
				c_args[k++]=argv[i][j++];
			}

			//printf("\nThese are the commands arguements -%s",c_args);
		}
		else
		{
			length_file = strlen(argv[i]);
				
			cmd_filenames[count_file] = (char *)malloc(length_file*sizeof(char));
			strcpy(cmd_filenames[count_file],argv[i]);
			count_file++;
		}
			
	}
	c_args[k] = '\0';

	if(strlen(c_args)==0)
		{
			s[0].flag = 1;
			s[4].flag = 1;
			s[3].flag = 1;
		}

	//printf("\nThese are the commands arguements -%s",c_args);
	
	if(count_file==0)
		printf("\nEnter some file Name");
	/*for(i=0;i<count_file;i++)
		printf("\nThe file that is input is %s ",cmd_filenames[i]);

	printf("\nWhat is happening!?");*/

	i=0;	
	while(c_args[i]!='\0')
	{
		switch(c_args[i])
		{
			case 'l' : s[0].flag = 1;
				   break;
			case 'L' : s[1].flag = 1;
				   break;
			case 'm' : s[2].flag = 1;
				   break;
			case 'c' : s[3].flag = 1;
				   break;
			case 'w' : s[4].flag = 1;
				   break;
			default : break;
	
		}

		i++;
	}

	int fd;
	fd = open(cmd_filenames[0],S_IRUSR);
	if(fd<0)
	{
		printf("Cant open error!");
		return 0;
	}
	else
	{
		fstat(fd,&filestat);
	//	printf("\nThe size of the file is %d",filestat.st_size);
		
		filecontent = (char*) (malloc(filestat.st_size + 10));
		//cmd_filenames[0] = (char *) (malloc(filestat.st_size));
		//reading the file
		read(fd,filecontent,filestat.st_size);
//		printf("\nSize of the file is %d",filestat.size);
	//	printf("\nThe file content is \n%s\n",filecontent); // printing the files here
		//now we need to send these files for the count of lines words etc
		execute_wc(filecontent,filestat.st_size,s,cmd_filenames[0]);
	}
	close(fd);
	free(cmd_filenames);
	free(filecontent);
	printf("\n");

}


#include <stdio.h>
#include <string.h>
#include <malloc.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>

struct args {
	char arg;
	int flag;
};

typedef struct args CMD_ARGUEMENTS; 
	

void execute_wc(char filename[],int length,CMD_ARGUEMENTS s[],char name[50])
{
	//printf("\nLength of the file is %d",length);
	int count=0,lc=0,highest =0,line_length=0,wc=0,temp=0;
	while(count<length)	
	{
		line_length=0;
		while(filename[count]!='\n')//used to measure the length of the line
		{
			//line_length++;
			//if((filename[count] == ' ' && filename[count-1]!=' ' && filename[count+1]!=' ') || (filename[count]!=' ' && filename[count+1]=='\n'))	
			/*temp = count;
			if(filename[count] == ' ')
			{
				temp = temp +1;
				if(filename[temp]!='\0')
				{
					while(filename[temp] == ' ')
					{
						count++;
						line_length++;
						temp++;
					}
				}

		
				wc++;
			count++;*/
			if(filename[count]==' ' && filename[count-1]=='\n'){
					count++;
					line_length++; }


			if(filename[count]== ' ' && filename[count-1] != ' ')
			     {
					while(filename[count]== ' ')// || filename[count] == '\n')
					{
 						count++;
						line_length++;
					
					}
					wc++;					

			     }

			if((filename[count]!=' ' && filename[count+1]=='\n'))
				wc++;

			

			count++;
			line_length++;
			
		}
			
		if(filename[count] == '\n')
		{
			lc++;
			count++;
			//wc++;//newly added
		}

		if(line_length>highest)
			highest = line_length;
	}
//	lc++;
//the order to be followed here is line, word, character 

	if(s[0].flag)
		printf("\t %d\t",lc); //line count
	if(s[4].flag)
		printf("\t %d\t",wc);//word count
	if(s[3].flag)
		printf("\t %d\t",count);//character count
	if(s[2].flag)
		printf("\t %d\t",length);//number of bytes
	if(s[1].flag)
		printf("\t %d\t",highest);//length of longest line

	printf("\t %s\n",name);
	

/*	printf("\nline %d",lc);
	printf("The longest line is %d\n",highest);
	printf(" Words are %d",wc);
	printf("Length %d",length);*/
	
}

int main(int argc,char **argv)
{

	int i=0,j=0,flag=0,k=0,length_file=0,count_file=0,rows;
	char c_args[6],**cmd_filenames,*filecontent=NULL;

	struct stat filestat;
	CMD_ARGUEMENTS s[5];
	s[0].arg = 'l';//No of lines
	s[1].arg = 'L';//Length of the longest line
	s[2].arg = 'm';//number of bytes
	s[3].arg = 'c';//number of characters
	s[4].arg = 'w';//number of words*/

	//initializing all flags
	s[0].flag = 0;
	s[1].flag = 0;
	s[2].flag = 0;
	s[3].flag = 0;
	s[4].flag = 0;

	//Row pointer for the number of files that are given as input to the file
	rows=argc-1;
	cmd_filenames = (char**)(malloc(rows*sizeof(char *)));




	for(i=1;i<argc;i++)
	{
		flag=0;
		j=0;
		//printf("\n%d arguement ",i);
		while(argv[i][j]!='\0')
		{

			if(argv[i][j]=='-')
			{
				j++;
				flag=1;
				break;
			}
			//printf("%c",argv[i][j++]);
			j++;

		}
		printf("  ");  // -l-w-c
	
		//Used to capture arguements of the commands
		if(flag)
		{

			while(argv[i][j]!='\0') //|| (argv[i][j]!=' '))
			{
				c_args[k++]=argv[i][j++];
			}

			//printf("\nThese are the commands arguements -%s",c_args);
		}
		else
		{
			length_file = strlen(argv[i]);
				
			cmd_filenames[count_file] = (char *)malloc(length_file*sizeof(char));
			strcpy(cmd_filenames[count_file],argv[i]);
			count_file++;
		}
			
	}
	c_args[k] = '\0';

	if(strlen(c_args)==0)
		{
			s[0].flag = 1;
			s[4].flag = 1;
			s[3].flag = 1;
		}

	//printf("\nThese are the commands arguements -%s",c_args);
	
	if(count_file==0)
		printf("\nEnter some file Name");
	/*for(i=0;i<count_file;i++)
		printf("\nThe file that is input is %s ",cmd_filenames[i]);

	printf("\nWhat is happening!?");*/

	i=0;	
	while(c_args[i]!='\0')
	{
		switch(c_args[i])
		{
			case 'l' : s[0].flag = 1;
				   break;
			case 'L' : s[1].flag = 1;
				   break;
			case 'm' : s[2].flag = 1;
				   break;
			case 'c' : s[3].flag = 1;
				   break;
			case 'w' : s[4].flag = 1;
				   break;
			default : break;
	
		}

		i++;
	}

	int fd;
	fd = open(cmd_filenames[0],S_IRUSR);
	if(fd<0)
	{
		printf("Cant open error!");
		return 0;
	}
	else
	{
		fstat(fd,&filestat);
	//	printf("\nThe size of the file is %d",filestat.st_size);
		
		filecontent = (char*) (malloc(filestat.st_size + 10));
		//cmd_filenames[0] = (char *) (malloc(filestat.st_size));
		//reading the file
		read(fd,filecontent,filestat.st_size);
//		printf("\nSize of the file is %d",filestat.size);
	//	printf("\nThe file content is \n%s\n",filecontent); // printing the files here
		//now we need to send these files for the count of lines words etc
		execute_wc(filecontent,filestat.st_size,s,cmd_filenames[0]);
	}
	close(fd);
	free(cmd_filenames);
	free(filecontent);
	printf("\n");

}


#include <stdio.h>
#include <string.h>
#include <malloc.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>

struct args {
	char arg;
	int flag;
};

typedef struct args CMD_ARGUEMENTS; 
	

void execute_wc(char filename[],int length,CMD_ARGUEMENTS s[],char name[50])
{
	//printf("\nLength of the file is %d",length);
	int count=0,lc=0,highest =0,line_length=0,wc=0,temp=0;
	while(count<length)	
	{
		line_length=0;
		while(filename[count]!='\n')//used to measure the length of the line
		{
			//line_length++;
			//if((filename[count] == ' ' && filename[count-1]!=' ' && filename[count+1]!=' ') || (filename[count]!=' ' && filename[count+1]=='\n'))	
			/*temp = count;
			if(filename[count] == ' ')
			{
				temp = temp +1;
				if(filename[temp]!='\0')
				{
					while(filename[temp] == ' ')
					{
						count++;
						line_length++;
						temp++;
					}
				}

		
				wc++;
			count++;*/
			if(filename[count]==' ' && filename[count-1]=='\n'){
					count++;
					line_length++; }


			if(filename[count]== ' ' && filename[count-1] != ' ')
			     {
					while(filename[count]== ' ')// || filename[count] == '\n')
					{
 						count++;
						line_length++;
					
					}
					wc++;					

			     }

			if((filename[count]!=' ' && filename[count+1]=='\n'))
				wc++;

			

			count++;
			line_length++;
			
		}
			
		if(filename[count] == '\n')
		{
			lc++;
			count++;
			//wc++;//newly added
		}

		if(line_length>highest)
			highest = line_length;
	}
//	lc++;
//the order to be followed here is line, word, character 

	if(s[0].flag)
		printf("\t %d\t",lc); //line count
	if(s[4].flag)
		printf("\t %d\t",wc);//word count
	if(s[3].flag)
		printf("\t %d\t",count);//character count
	if(s[2].flag)
		printf("\t %d\t",length);//number of bytes
	if(s[1].flag)
		printf("\t %d\t",highest);//length of longest line

	printf("\t %s\n",name);
	

/*	printf("\nline %d",lc);
	printf("The longest line is %d\n",highest);
	printf(" Words are %d",wc);
	printf("Length %d",length);*/
	
}

int main(int argc,char **argv)
{

	int i=0,j=0,flag=0,k=0,length_file=0,count_file=0,rows;
	char c_args[6],**cmd_filenames,*filecontent=NULL;

	struct stat filestat;
	CMD_ARGUEMENTS s[5];
	s[0].arg = 'l';//No of lines
	s[1].arg = 'L';//Length of the longest line
	s[2].arg = 'm';//number of bytes
	s[3].arg = 'c';//number of characters
	s[4].arg = 'w';//number of words*/

	//initializing all flags
	s[0].flag = 0;
	s[1].flag = 0;
	s[2].flag = 0;
	s[3].flag = 0;
	s[4].flag = 0;

	//Row pointer for the number of files that are given as input to the file
	rows=argc-1;
	cmd_filenames = (char**)(malloc(rows*sizeof(char *)));




	for(i=1;i<argc;i++)
	{
		flag=0;
		j=0;
		//printf("\n%d arguement ",i);
		while(argv[i][j]!='\0')
		{

			if(argv[i][j]=='-')
			{
				j++;
				flag=1;
				break;
			}
			//printf("%c",argv[i][j++]);
			j++;

		}
		printf("  ");  // -l-w-c
	
		//Used to capture arguements of the commands
		if(flag)
		{

			while(argv[i][j]!='\0') //|| (argv[i][j]!=' '))
			{
				c_args[k++]=argv[i][j++];
			}

			//printf("\nThese are the commands arguements -%s",c_args);
		}
		else
		{
			length_file = strlen(argv[i]);
				
			cmd_filenames[count_file] = (char *)malloc(length_file*sizeof(char));
			strcpy(cmd_filenames[count_file],argv[i]);
			count_file++;
		}
			
	}
	c_args[k] = '\0';

	if(strlen(c_args)==0)
		{
			s[0].flag = 1;
			s[4].flag = 1;
			s[3].flag = 1;
		}

	//printf("\nThese are the commands arguements -%s",c_args);
	
	if(count_file==0)
		printf("\nEnter some file Name");
	/*for(i=0;i<count_file;i++)
		printf("\nThe file that is input is %s ",cmd_filenames[i]);

	printf("\nWhat is happening!?");*/

	i=0;	
	while(c_args[i]!='\0')
	{
		switch(c_args[i])
		{
			case 'l' : s[0].flag = 1;
				   break;
			case 'L' : s[1].flag = 1;
				   break;
			case 'm' : s[2].flag = 1;
				   break;
			case 'c' : s[3].flag = 1;
				   break;
			case 'w' : s[4].flag = 1;
				   break;
			default : break;
	
		}

		i++;
	}

	int fd;
	fd = open(cmd_filenames[0],S_IRUSR);
	if(fd<0)
	{
		printf("Cant open error!");
		return 0;
	}
	else
	{
		fstat(fd,&filestat);
	//	printf("\nThe size of the file is %d",filestat.st_size);
		
		filecontent = (char*) (malloc(filestat.st_size + 10));
		//cmd_filenames[0] = (char *) (malloc(filestat.st_size));
		//reading the file
		read(fd,filecontent,filestat.st_size);
//		printf("\nSize of the file is %d",filestat.size);
	//	printf("\nThe file content is \n%s\n",filecontent); // printing the files here
		//now we need to send these files for the count of lines words etc
		execute_wc(filecontent,filestat.st_size,s,cmd_filenames[0]);
	}
	close(fd);
	free(cmd_filenames);
	free(filecontent);
	printf("\n");

}

#include <stdio.h>
#include <string.h>
#include <malloc.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>

struct args {
	char arg;
	int flag;
};

typedef struct args CMD_ARGUEMENTS; 
	

void execute_wc(char filename[],int length,CMD_ARGUEMENTS s[],char name[50])
{
	//printf("\nLength of the file is %d",length);
	int count=0,lc=0,highest =0,line_length=0,wc=0,temp=0;
	while(count<length)	
	{
		line_length=0;
		while(filename[count]!='\n')//used to measure the length of the line
		{
			//line_length++;
			//if((filename[count] == ' ' && filename[count-1]!=' ' && filename[count+1]!=' ') || (filename[count]!=' ' && filename[count+1]=='\n'))	
			/*temp = count;
			if(filename[count] == ' ')
			{
				temp = temp +1;
				if(filename[temp]!='\0')
				{
					while(filename[temp] == ' ')
					{
						count++;
						line_length++;
						temp++;
					}
				}

		
				wc++;
			count++;*/
			if(filename[count]==' ' && filename[count-1]=='\n'){
					count++;
					line_length++; }


			if(filename[count]== ' ' && filename[count-1] != ' ')
			     {
					while(filename[count]== ' ')// || filename[count] == '\n')
					{
 						count++;
						line_length++;
					
					}
					wc++;					

			     }

			if((filename[count]!=' ' && filename[count+1]=='\n'))
				wc++;

			

			count++;
			line_length++;
			
		}
			
		if(filename[count] == '\n')
		{
			lc++;
			count++;
			//wc++;//newly added
		}

		if(line_length>highest)
			highest = line_length;
	}
//	lc++;
//the order to be followed here is line, word, character 

	if(s[0].flag)
		printf("\t %d\t",lc); //line count
	if(s[4].flag)
		printf("\t %d\t",wc);//word count
	if(s[3].flag)
		printf("\t %d\t",count);//character count
	if(s[2].flag)
		printf("\t %d\t",length);//number of bytes
	if(s[1].flag)
		printf("\t %d\t",highest);//length of longest line

	printf("\t %s\n",name);
	

/*	printf("\nline %d",lc);
	printf("The longest line is %d\n",highest);
	printf(" Words are %d",wc);
	printf("Length %d",length);*/
	
}

int main(int argc,char **argv)
{

	int i=0,j=0,flag=0,k=0,length_file=0,count_file=0,rows;
	char c_args[6],**cmd_filenames,*filecontent=NULL;

	struct stat filestat;
	CMD_ARGUEMENTS s[5];
	s[0].arg = 'l';//No of lines
	s[1].arg = 'L';//Length of the longest line
	s[2].arg = 'm';//number of bytes
	s[3].arg = 'c';//number of characters
	s[4].arg = 'w';//number of words*/

	//initializing all flags
	s[0].flag = 0;
	s[1].flag = 0;
	s[2].flag = 0;
	s[3].flag = 0;
	s[4].flag = 0;

	//Row pointer for the number of files that are given as input to the file
	rows=argc-1;
	cmd_filenames = (char**)(malloc(rows*sizeof(char *)));




	for(i=1;i<argc;i++)
	{
		flag=0;
		j=0;
		//printf("\n%d arguement ",i);
		while(argv[i][j]!='\0')
		{

			if(argv[i][j]=='-')
			{
				j++;
				flag=1;
				break;
			}
			//printf("%c",argv[i][j++]);
			j++;

		}
		printf("  ");  // -l-w-c
	
		//Used to capture arguements of the commands
		if(flag)
		{

			while(argv[i][j]!='\0') //|| (argv[i][j]!=' '))
			{
				c_args[k++]=argv[i][j++];
			}

			//printf("\nThese are the commands arguements -%s",c_args);
		}
		else
		{
			length_file = strlen(argv[i]);
				
			cmd_filenames[count_file] = (char *)malloc(length_file*sizeof(char));
			strcpy(cmd_filenames[count_file],argv[i]);
			count_file++;
		}
			
	}
	c_args[k] = '\0';

	if(strlen(c_args)==0)
		{
			s[0].flag = 1;
			s[4].flag = 1;
			s[3].flag = 1;
		}

	//printf("\nThese are the commands arguements -%s",c_args);
	
	if(count_file==0)
		printf("\nEnter some file Name");
	/*for(i=0;i<count_file;i++)
		printf("\nThe file that is input is %s ",cmd_filenames[i]);

	printf("\nWhat is happening!?");*/

	i=0;	
	while(c_args[i]!='\0')
	{
		switch(c_args[i])
		{
			case 'l' : s[0].flag = 1;
				   break;
			case 'L' : s[1].flag = 1;
				   break;
			case 'm' : s[2].flag = 1;
				   break;
			case 'c' : s[3].flag = 1;
				   break;
			case 'w' : s[4].flag = 1;
				   break;
			default : break;
	
		}

		i++;
	}

	int fd;
	fd = open(cmd_filenames[0],S_IRUSR);
	if(fd<0)
	{
		printf("Cant open error!");
		return 0;
	}
	else
	{
		fstat(fd,&filestat);
	//	printf("\nThe size of the file is %d",filestat.st_size);
		
		filecontent = (char*) (malloc(filestat.st_size + 10));
		//cmd_filenames[0] = (char *) (malloc(filestat.st_size));
		//reading the file
		read(fd,filecontent,filestat.st_size);
//		printf("\nSize of the file is %d",filestat.size);
	//	printf("\nThe file content is \n%s\n",filecontent); // printing the files here
		//now we need to send these files for the count of lines words etc
		execute_wc(filecontent,filestat.st_size,s,cmd_filenames[0]);
	}
	close(fd);
	free(cmd_filenames);
	free(filecontent);
	printf("\n");

}


#include <stdio.h>
#include <string.h>
#include <malloc.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>

struct args {
	char arg;
	int flag;
};

typedef struct args CMD_ARGUEMENTS; 
	

void execute_wc(char filename[],int length,CMD_ARGUEMENTS s[],char name[50])
{
	//printf("\nLength of the file is %d",length);
	int count=0,lc=0,highest =0,line_length=0,wc=0,temp=0;
	while(count<length)	
	{
		line_length=0;
		while(filename[count]!='\n')//used to measure the length of the line
		{
			//line_length++;
			//if((filename[count] == ' ' && filename[count-1]!=' ' && filename[count+1]!=' ') || (filename[count]!=' ' && filename[count+1]=='\n'))	
			/*temp = count;
			if(filename[count] == ' ')
			{
				temp = temp +1;
				if(filename[temp]!='\0')
				{
					while(filename[temp] == ' ')
					{
						count++;
						line_length++;
						temp++;
					}
				}

		
				wc++;
			count++;*/
			if(filename[count]==' ' && filename[count-1]=='\n'){
					count++;
					line_length++; }


			if(filename[count]== ' ' && filename[count-1] != ' ')
			     {
					while(filename[count]== ' ')// || filename[count] == '\n')
					{
 						count++;
						line_length++;
					
					}
					wc++;					

			     }

			if((filename[count]!=' ' && filename[count+1]=='\n'))
				wc++;

			

			count++;
			line_length++;
			
		}
			
		if(filename[count] == '\n')
		{
			lc++;
			count++;
			//wc++;//newly added
		}

		if(line_length>highest)
			highest = line_length;
	}
//	lc++;
//the order to be followed here is line, word, character 

	if(s[0].flag)
		printf("\t %d\t",lc); //line count
	if(s[4].flag)
		printf("\t %d\t",wc);//word count
	if(s[3].flag)
		printf("\t %d\t",count);//character count
	if(s[2].flag)
		printf("\t %d\t",length);//number of bytes
	if(s[1].flag)
		printf("\t %d\t",highest);//length of longest line

	printf("\t %s\n",name);
	

/*	printf("\nline %d",lc);
	printf("The longest line is %d\n",highest);
	printf(" Words are %d",wc);
	printf("Length %d",length);*/
	
}

int main(int argc,char **argv)
{

	int i=0,j=0,flag=0,k=0,length_file=0,count_file=0,rows;
	char c_args[6],**cmd_filenames,*filecontent=NULL;

	struct stat filestat;
	CMD_ARGUEMENTS s[5];
	s[0].arg = 'l';//No of lines
	s[1].arg = 'L';//Length of the longest line
	s[2].arg = 'm';//number of bytes
	s[3].arg = 'c';//number of characters
	s[4].arg = 'w';//number of words*/

	//initializing all flags
	s[0].flag = 0;
	s[1].flag = 0;
	s[2].flag = 0;
	s[3].flag = 0;
	s[4].flag = 0;

	//Row pointer for the number of files that are given as input to the file
	rows=argc-1;
	cmd_filenames = (char**)(malloc(rows*sizeof(char *)));




	for(i=1;i<argc;i++)
	{
		flag=0;
		j=0;
		//printf("\n%d arguement ",i);
		while(argv[i][j]!='\0')
		{

			if(argv[i][j]=='-')
			{
				j++;
				flag=1;
				break;
			}
			//printf("%c",argv[i][j++]);
			j++;

		}
		printf("  ");  // -l-w-c
	
		//Used to capture arguements of the commands
		if(flag)
		{

			while(argv[i][j]!='\0') //|| (argv[i][j]!=' '))
			{
				c_args[k++]=argv[i][j++];
			}

			//printf("\nThese are the commands arguements -%s",c_args);
		}
		else
		{
			length_file = strlen(argv[i]);
				
			cmd_filenames[count_file] = (char *)malloc(length_file*sizeof(char));
			strcpy(cmd_filenames[count_file],argv[i]);
			count_file++;
		}
			
	}
	c_args[k] = '\0';

	if(strlen(c_args)==0)
		{
			s[0].flag = 1;
			s[4].flag = 1;
			s[3].flag = 1;
		}

	//printf("\nThese are the commands arguements -%s",c_args);
	
	if(count_file==0)
		printf("\nEnter some file Name");
	/*for(i=0;i<count_file;i++)
		printf("\nThe file that is input is %s ",cmd_filenames[i]);

	printf("\nWhat is happening!?");*/

	i=0;	
	while(c_args[i]!='\0')
	{
		switch(c_args[i])
		{
			case 'l' : s[0].flag = 1;
				   break;
			case 'L' : s[1].flag = 1;
				   break;
			case 'm' : s[2].flag = 1;
				   break;
			case 'c' : s[3].flag = 1;
				   break;
			case 'w' : s[4].flag = 1;
				   break;
			default : break;
	
		}

		i++;
	}

	int fd;
	fd = open(cmd_filenames[0],S_IRUSR);
	if(fd<0)
	{
		printf("Cant open error!");
		return 0;
	}
	else
	{
		fstat(fd,&filestat);
	//	printf("\nThe size of the file is %d",filestat.st_size);
		
		filecontent = (char*) (malloc(filestat.st_size + 10));
		//cmd_filenames[0] = (char *) (malloc(filestat.st_size));
		//reading the file
		read(fd,filecontent,filestat.st_size);
//		printf("\nSize of the file is %d",filestat.size);
	//	printf("\nThe file content is \n%s\n",filecontent); // printing the files here
		//now we need to send these files for the count of lines words etc
		execute_wc(filecontent,filestat.st_size,s,cmd_filenames[0]);
	}
	close(fd);
	free(cmd_filenames);
	free(filecontent);
	printf("\n");

}
